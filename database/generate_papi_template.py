"""This module is a utility script to create papi templates.
This script re-creates the papi_template.py file on invocation including
imports.
"""
import bz2
import base64
from pathlib import Path

papi_versions = [path.stem.replace('template-', '').replace('.papi', '') for path in Path('.').glob('template-*.papi')]

with open('papi_template.py', 'wt', encoding='utf-8') as output_file:
    output_file.write(
        f'############################################################################\n'
        f'# This file is generated by {Path(__file__).name}, DO NOT EDIT !!!\n'
        f'############################################################################\n'
        f'import bz2\n'
        f'import base64\n'
        f'from logging import Logger\n'
        f'from pathlib import Path\n'
        f'\n'
        f'from common.logger import get_logger\n'
        f'\n'
        f'\n'
        f'logger: Logger = get_logger()\n'
        f'\n'
        f'\n'
        f'PAPI_VERSIONS: list[str] = [\n')
    for papi_version in papi_versions:
        output_file.write(
            f'    \'{papi_version}\',\n')
    output_file.write(
        ']\n'
        '\n'
        '\n'
        'def create_empty_papi_database(file: Path, papi_version: str) -> bool:\n'
        '    match papi_version:\n')
    for papi_version in papi_versions:
        with open(f'template-{papi_version}.papi', 'rb') as input_file:
            b64 = base64.b64encode(bz2.compress(input_file.read()))
            output_file.write(
                f'        case \'{papi_version}\':\n'
                f'            b64 = (\n')
            part_len: int = 80
            for b64_part in [b64[i:i + part_len] for i in range(0, len(b64), part_len)]:
                output_file.write(
                    f'                {b64_part}\n')
        output_file.write(
            '            )\n')
    output_file.write(
        '        case _:\n'
        '            raise ValueError()\n')
    output_file.write(
        '    if not file.parents[0].is_dir():\n'
        '        logger.warning(\n'
        '            f\'Le répertoire [{file.parents[0]}] n\\\'existe pas, la génération du fichier Papi à partir \'\n'
        '            f\'de la plateforme ChessEvent est impossible.\'\n'
        '        )\n'
        '        return False\n'
        '    with open(file, \'wb\') as f:\n'
        '        f.write(\n'
        '            bz2.decompress(\n'
        '                base64.decodebytes(\n'
        '                    b64\n'
        '                )\n'
        '            )\n'
        '        )\n'
        '    return True\n')
